#ifndef OSMIUM_GEOM_COORDINATES_HPP
#define OSMIUM_GEOM_COORDINATES_HPP

/*

This file is part of Osmium (http://osmcode.org/libosmium).

Copyright 2013,2014 Jochen Topf <jochen@topf.org> and others (see README).

Boost Software License - Version 1.0 - August 17th, 2003

Permission is hereby granted, free of charge, to any person or organization
obtaining a copy of the software and accompanying documentation covered by
this license (the "Software") to use, reproduce, display, distribute,
execute, and transmit the Software, and to prepare derivative works of the
Software, and to permit third-parties to whom the Software is furnished to
do so, all subject to the following:

The copyright notices in the Software and this entire statement, including
the above license grant, this restriction and the following disclaimer,
must be included in all copies of the Software, in whole or in part, and
all derivative works of the Software, unless such copies or derivative
works are solely in the form of machine-executable object code generated by
a source language processor.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
DEALINGS IN THE SOFTWARE.

*/

#include <cstddef>
#include <iosfwd>
#include <string>

#include <osmium/osm/location.hpp>

namespace osmium {

    namespace geom {

        namespace detail {

            /**
             * Append double to string, removing superfluous '0' characters at
             * the end. The decimal dot will also be removed if necessary.
             */
            inline void double2string(std::string& s, double value) {
                s += std::to_string(value);

                size_t len = s.size()-1;
                while (s[len] == '0') --len;
                if (s[len] == '.') --len;

                s.resize(len+1);
            }

        } // namespace detail

        struct Coordinates {

            double x;
            double y;

            explicit Coordinates(double cx, double cy) : x(cx), y(cy) {
            }

            Coordinates(const osmium::Location& location) : x(location.lon()), y(location.lat()) {
            }

            void append_to_string(std::string& s, const char infix) const {
                osmium::geom::detail::double2string(s, x);
                s += infix;
                osmium::geom::detail::double2string(s, y);
            }

            void append_to_string(std::string& s, const char prefix, const char infix, const char suffix) const {
                s += prefix;
                append_to_string(s, infix);
                s += suffix;
            }

        }; // struct coordinates

        inline bool operator==(const Coordinates& lhs, const Coordinates& rhs) {
            return lhs.x == rhs.x && lhs.y == rhs.y;
        }

        inline bool operator!=(const Coordinates& lhs, const Coordinates& rhs) {
            return ! operator==(lhs, rhs);
        }

        template <typename TChar, typename TTraits>
        inline std::basic_ostream<TChar, TTraits>& operator<<(std::basic_ostream<TChar, TTraits>& out, const Coordinates& c) {
            return out << '(' << c.x << ',' << c.y << ')';
        }

    } // namespace geom

} // namespace osmium

#endif // OSMIUM_GEOM_COORDINATES_HPP
